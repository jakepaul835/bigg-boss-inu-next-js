/** 
 * ATTENTION: Update moduleRegistry.ts to register all necessary modules' reducers
 * Do NOT edit this file unless you know what you are doing
 */

import { configureStore } from '@reduxjs/toolkit';
import { moduleRegistry } from './moduleRegistry';

// Automatic store generating 
// Dynamically generate the global store object by loading each reducer
const reducers = Object.keys(moduleRegistry).reduce((acc, key) => {
  try {
    // Use require to synchronously load the reducer
    const { reducer } = require(`./${key}`);
    acc[key] = reducer;
  } catch (error) {
    console.error(`Failed to load reducer for ${key}:`, error);
  }
  return acc;
}, {} as Record<string, any>);

// Global store object to be added in the global provider context
export const store = configureStore({
  devTools: process.env.NODE_ENV !== 'production',
  reducer: reducers,
}); 

/* Manual way - Not maintained!!!
export const store = configureStore({
  devTools: process.env.NODE_ENV !== 'production',
  reducer: {
    memberhsip: membershipReducer
  }, 
}) */

// Re-export hooks and dynamic imports
export { useFetchPublicData, useFetchUserData } from './factory';
